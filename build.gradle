plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}


group = 'tech.sethi.pebbles'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'forgevaultbridge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'official', version: '1.19.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'forgevaultbridge'

            mods {
                forgevaultbridge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'forgevaultbridge'

            mods {
                forgevaultbridge {
                    source sourceSets.main
                }
            }
        }


        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'forgevaultbridge'

            mods {
                forgevaultbridge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'forgevaultbridge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                forgevaultbridge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }

    maven { url 'https://jitpack.io' }

    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'

    compileOnly "org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT"
    shade "com.github.MilkBowl:VaultAPI:1.7.1"

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "forgevaultbridge",
                //"Specification-Vendor": "forgevaultbridge authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "forgevaultbridge authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

reobf {
    shadowJar {}
}
